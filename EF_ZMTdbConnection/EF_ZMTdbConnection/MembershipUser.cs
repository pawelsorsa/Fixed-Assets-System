//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace EF_ZMTdbEntities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Licence))]
    public partial class MembershipUser: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string login
        {
            get { return _login; }
            set
            {
                if (_login != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'login' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _login = value;
                    OnPropertyChanged("login");
                }
            }
        }
        private string _login;
    
        [DataMember]
        public string password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    _password = value;
                    OnPropertyChanged("password");
                }
            }
        }
        private string _password;
    
        [DataMember]
        public string email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string surname
        {
            get { return _surname; }
            set
            {
                if (_surname != value)
                {
                    _surname = value;
                    OnPropertyChanged("surname");
                }
            }
        }
        private string _surname;
    
        [DataMember]
        public System.DateTime creation_date
        {
            get { return _creation_date; }
            set
            {
                if (_creation_date != value)
                {
                    _creation_date = value;
                    OnPropertyChanged("creation_date");
                }
            }
        }
        private System.DateTime _creation_date;
    
        [DataMember]
        public System.DateTime last_login_date
        {
            get { return _last_login_date; }
            set
            {
                if (_last_login_date != value)
                {
                    _last_login_date = value;
                    OnPropertyChanged("last_login_date");
                }
            }
        }
        private System.DateTime _last_login_date;
    
        [DataMember]
        public bool is_online
        {
            get { return _is_online; }
            set
            {
                if (_is_online != value)
                {
                    _is_online = value;
                    OnPropertyChanged("is_online");
                }
            }
        }
        private bool _is_online;
    
        [DataMember]
        public bool is_active
        {
            get { return _is_active; }
            set
            {
                if (_is_active != value)
                {
                    _is_active = value;
                    OnPropertyChanged("is_active");
                }
            }
        }
        private bool _is_active;
    
        [DataMember]
        public Nullable<int> PLKLogin
        {
            get { return _pLKLogin; }
            set
            {
                if (_pLKLogin != value)
                {
                    _pLKLogin = value;
                    OnPropertyChanged("PLKLogin");
                }
            }
        }
        private Nullable<int> _pLKLogin;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Licence> Licences
        {
            get
            {
                if (_licences == null)
                {
                    _licences = new TrackableCollection<Licence>();
                    _licences.CollectionChanged += FixupLicences;
                }
                return _licences;
            }
            set
            {
                if (!ReferenceEquals(_licences, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_licences != null)
                    {
                        _licences.CollectionChanged -= FixupLicences;
                    }
                    _licences = value;
                    if (_licences != null)
                    {
                        _licences.CollectionChanged += FixupLicences;
                    }
                    OnNavigationPropertyChanged("Licences");
                }
            }
        }
        private TrackableCollection<Licence> _licences;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Licences.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupLicences(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Licence item in e.NewItems)
                {
                    item.MembershipUser = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Licences", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Licence item in e.OldItems)
                {
                    if (ReferenceEquals(item.MembershipUser, this))
                    {
                        item.MembershipUser = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Licences", item);
                    }
                }
            }
        }

        #endregion
    }
}
