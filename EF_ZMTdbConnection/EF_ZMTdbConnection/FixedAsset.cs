//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace EF_ZMTdbEntities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Contractor))]
    [KnownType(typeof(Device))]
    [KnownType(typeof(Subgroup))]
    [KnownType(typeof(Licence))]
    [KnownType(typeof(Person))]
    public partial class FixedAsset: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string inventory_number
        {
            get { return _inventory_number; }
            set
            {
                if (_inventory_number != value)
                {
                    _inventory_number = value;
                    OnPropertyChanged("inventory_number");
                }
            }
        }
        private string _inventory_number;
    
        [DataMember]
        public string comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public Nullable<int> id_person
        {
            get { return _id_person; }
            set
            {
                if (_id_person != value)
                {
                    ChangeTracker.RecordOriginalValue("id_person", _id_person);
                    if (!IsDeserializing)
                    {
                        if (Person != null && Person.id != value)
                        {
                            Person = null;
                        }
                    }
                    _id_person = value;
                    OnPropertyChanged("id_person");
                }
            }
        }
        private Nullable<int> _id_person;
    
        [DataMember]
        public System.DateTime date_of_activation
        {
            get { return _date_of_activation; }
            set
            {
                if (_date_of_activation != value)
                {
                    _date_of_activation = value;
                    OnPropertyChanged("date_of_activation");
                }
            }
        }
        private System.DateTime _date_of_activation;
    
        [DataMember]
        public Nullable<System.DateTime> date_of_desactivation
        {
            get { return _date_of_desactivation; }
            set
            {
                if (_date_of_desactivation != value)
                {
                    _date_of_desactivation = value;
                    OnPropertyChanged("date_of_desactivation");
                }
            }
        }
        private Nullable<System.DateTime> _date_of_desactivation;
    
        [DataMember]
        public string serial_number
        {
            get { return _serial_number; }
            set
            {
                if (_serial_number != value)
                {
                    _serial_number = value;
                    OnPropertyChanged("serial_number");
                }
            }
        }
        private string _serial_number;
    
        [DataMember]
        public string MPK
        {
            get { return _mPK; }
            set
            {
                if (_mPK != value)
                {
                    _mPK = value;
                    OnPropertyChanged("MPK");
                }
            }
        }
        private string _mPK;
    
        [DataMember]
        public Nullable<int> quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    OnPropertyChanged("quantity");
                }
            }
        }
        private Nullable<int> _quantity;
    
        [DataMember]
        public string localization
        {
            get { return _localization; }
            set
            {
                if (_localization != value)
                {
                    _localization = value;
                    OnPropertyChanged("localization");
                }
            }
        }
        private string _localization;
    
        [DataMember]
        public Nullable<int> id_kind
        {
            get { return _id_kind; }
            set
            {
                if (_id_kind != value)
                {
                    _id_kind = value;
                    OnPropertyChanged("id_kind");
                }
            }
        }
        private Nullable<int> _id_kind;
    
        [DataMember]
        public Nullable<int> id_subgroup
        {
            get { return _id_subgroup; }
            set
            {
                if (_id_subgroup != value)
                {
                    ChangeTracker.RecordOriginalValue("id_subgroup", _id_subgroup);
                    if (!IsDeserializing)
                    {
                        if (Subgroup != null && Subgroup.id != value)
                        {
                            Subgroup = null;
                        }
                    }
                    _id_subgroup = value;
                    OnPropertyChanged("id_subgroup");
                }
            }
        }
        private Nullable<int> _id_subgroup;
    
        [DataMember]
        public Nullable<System.DateTime> last_modified_date
        {
            get { return _last_modified_date; }
            set
            {
                if (_last_modified_date != value)
                {
                    _last_modified_date = value;
                    OnPropertyChanged("last_modified_date");
                }
            }
        }
        private Nullable<System.DateTime> _last_modified_date;
    
        [DataMember]
        public string last_modifed_login
        {
            get { return _last_modifed_login; }
            set
            {
                if (_last_modifed_login != value)
                {
                    _last_modifed_login = value;
                    OnPropertyChanged("last_modifed_login");
                }
            }
        }
        private string _last_modifed_login;
    
        [DataMember]
        public bool cassation
        {
            get { return _cassation; }
            set
            {
                if (_cassation != value)
                {
                    _cassation = value;
                    OnPropertyChanged("cassation");
                }
            }
        }
        private bool _cassation;
    
        [DataMember]
        public string created_by
        {
            get { return _created_by; }
            set
            {
                if (_created_by != value)
                {
                    _created_by = value;
                    OnPropertyChanged("created_by");
                }
            }
        }
        private string _created_by;
    
        [DataMember]
        public Nullable<int> id_contractor
        {
            get { return _id_contractor; }
            set
            {
                if (_id_contractor != value)
                {
                    ChangeTracker.RecordOriginalValue("id_contractor", _id_contractor);
                    if (!IsDeserializing)
                    {
                        if (Contractor != null && Contractor.id != value)
                        {
                            Contractor = null;
                        }
                    }
                    _id_contractor = value;
                    OnPropertyChanged("id_contractor");
                }
            }
        }
        private Nullable<int> _id_contractor;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Contractor Contractor
        {
            get { return _contractor; }
            set
            {
                if (!ReferenceEquals(_contractor, value))
                {
                    var previousValue = _contractor;
                    _contractor = value;
                    FixupContractor(previousValue);
                    OnNavigationPropertyChanged("Contractor");
                }
            }
        }
        private Contractor _contractor;
    
        [DataMember]
        public TrackableCollection<Device> Devices
        {
            get
            {
                if (_devices == null)
                {
                    _devices = new TrackableCollection<Device>();
                    _devices.CollectionChanged += FixupDevices;
                }
                return _devices;
            }
            set
            {
                if (!ReferenceEquals(_devices, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_devices != null)
                    {
                        _devices.CollectionChanged -= FixupDevices;
                    }
                    _devices = value;
                    if (_devices != null)
                    {
                        _devices.CollectionChanged += FixupDevices;
                    }
                    OnNavigationPropertyChanged("Devices");
                }
            }
        }
        private TrackableCollection<Device> _devices;
    
        [DataMember]
        public Subgroup Subgroup
        {
            get { return _subgroup; }
            set
            {
                if (!ReferenceEquals(_subgroup, value))
                {
                    var previousValue = _subgroup;
                    _subgroup = value;
                    FixupSubgroup(previousValue);
                    OnNavigationPropertyChanged("Subgroup");
                }
            }
        }
        private Subgroup _subgroup;
    
        [DataMember]
        public TrackableCollection<Licence> Licences
        {
            get
            {
                if (_licences == null)
                {
                    _licences = new TrackableCollection<Licence>();
                    _licences.CollectionChanged += FixupLicences;
                }
                return _licences;
            }
            set
            {
                if (!ReferenceEquals(_licences, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_licences != null)
                    {
                        _licences.CollectionChanged -= FixupLicences;
                    }
                    _licences = value;
                    if (_licences != null)
                    {
                        _licences.CollectionChanged += FixupLicences;
                    }
                    OnNavigationPropertyChanged("Licences");
                }
            }
        }
        private TrackableCollection<Licence> _licences;
    
        [DataMember]
        public Person Person
        {
            get { return _person; }
            set
            {
                if (!ReferenceEquals(_person, value))
                {
                    var previousValue = _person;
                    _person = value;
                    FixupPerson(previousValue);
                    OnNavigationPropertyChanged("Person");
                }
            }
        }
        private Person _person;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Contractor = null;
            Devices.Clear();
            Subgroup = null;
            Licences.Clear();
            Person = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupContractor(Contractor previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FixedAssets.Contains(this))
            {
                previousValue.FixedAssets.Remove(this);
            }
    
            if (Contractor != null)
            {
                if (!Contractor.FixedAssets.Contains(this))
                {
                    Contractor.FixedAssets.Add(this);
                }
    
                id_contractor = Contractor.id;
            }
            else if (!skipKeys)
            {
                id_contractor = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Contractor")
                    && (ChangeTracker.OriginalValues["Contractor"] == Contractor))
                {
                    ChangeTracker.OriginalValues.Remove("Contractor");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Contractor", previousValue);
                }
                if (Contractor != null && !Contractor.ChangeTracker.ChangeTrackingEnabled)
                {
                    Contractor.StartTracking();
                }
            }
        }
    
        private void FixupSubgroup(Subgroup previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FixedAssets.Contains(this))
            {
                previousValue.FixedAssets.Remove(this);
            }
    
            if (Subgroup != null)
            {
                if (!Subgroup.FixedAssets.Contains(this))
                {
                    Subgroup.FixedAssets.Add(this);
                }
    
                id_subgroup = Subgroup.id;
            }
            else if (!skipKeys)
            {
                id_subgroup = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Subgroup")
                    && (ChangeTracker.OriginalValues["Subgroup"] == Subgroup))
                {
                    ChangeTracker.OriginalValues.Remove("Subgroup");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Subgroup", previousValue);
                }
                if (Subgroup != null && !Subgroup.ChangeTracker.ChangeTrackingEnabled)
                {
                    Subgroup.StartTracking();
                }
            }
        }
    
        private void FixupPerson(Person previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FixedAssets.Contains(this))
            {
                previousValue.FixedAssets.Remove(this);
            }
    
            if (Person != null)
            {
                if (!Person.FixedAssets.Contains(this))
                {
                    Person.FixedAssets.Add(this);
                }
    
                id_person = Person.id;
            }
            else if (!skipKeys)
            {
                id_person = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Person")
                    && (ChangeTracker.OriginalValues["Person"] == Person))
                {
                    ChangeTracker.OriginalValues.Remove("Person");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Person", previousValue);
                }
                if (Person != null && !Person.ChangeTracker.ChangeTrackingEnabled)
                {
                    Person.StartTracking();
                }
            }
        }
    
        private void FixupDevices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Device item in e.NewItems)
                {
                    item.FixedAsset = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Devices", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Device item in e.OldItems)
                {
                    if (ReferenceEquals(item.FixedAsset, this))
                    {
                        item.FixedAsset = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Devices", item);
                    }
                }
            }
        }
    
        private void FixupLicences(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Licence item in e.NewItems)
                {
                    item.FixedAsset = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Licences", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Licence item in e.OldItems)
                {
                    if (ReferenceEquals(item.FixedAsset, this))
                    {
                        item.FixedAsset = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Licences", item);
                    }
                }
            }
        }

        #endregion
    }
}
