//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace EF_ZMTdbEntities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(FixedAsset))]
    [KnownType(typeof(Section))]
    public partial class Person: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string surname
        {
            get { return _surname; }
            set
            {
                if (_surname != value)
                {
                    _surname = value;
                    OnPropertyChanged("surname");
                }
            }
        }
        private string _surname;
    
        [DataMember]
        public string email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public Nullable<int> area_code
        {
            get { return _area_code; }
            set
            {
                if (_area_code != value)
                {
                    _area_code = value;
                    OnPropertyChanged("area_code");
                }
            }
        }
        private Nullable<int> _area_code;
    
        [DataMember]
        public Nullable<int> phone_number
        {
            get { return _phone_number; }
            set
            {
                if (_phone_number != value)
                {
                    _phone_number = value;
                    OnPropertyChanged("phone_number");
                }
            }
        }
        private Nullable<int> _phone_number;
    
        [DataMember]
        public Nullable<int> phone_number2
        {
            get { return _phone_number2; }
            set
            {
                if (_phone_number2 != value)
                {
                    _phone_number2 = value;
                    OnPropertyChanged("phone_number2");
                }
            }
        }
        private Nullable<int> _phone_number2;
    
        [DataMember]
        public int id_section
        {
            get { return _id_section; }
            set
            {
                if (_id_section != value)
                {
                    ChangeTracker.RecordOriginalValue("id_section", _id_section);
                    if (!IsDeserializing)
                    {
                        if (Section != null && Section.id != value)
                        {
                            Section = null;
                        }
                    }
                    _id_section = value;
                    OnPropertyChanged("id_section");
                }
            }
        }
        private int _id_section;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<FixedAsset> FixedAssets
        {
            get
            {
                if (_fixedAssets == null)
                {
                    _fixedAssets = new TrackableCollection<FixedAsset>();
                    _fixedAssets.CollectionChanged += FixupFixedAssets;
                }
                return _fixedAssets;
            }
            set
            {
                if (!ReferenceEquals(_fixedAssets, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_fixedAssets != null)
                    {
                        _fixedAssets.CollectionChanged -= FixupFixedAssets;
                    }
                    _fixedAssets = value;
                    if (_fixedAssets != null)
                    {
                        _fixedAssets.CollectionChanged += FixupFixedAssets;
                    }
                    OnNavigationPropertyChanged("FixedAssets");
                }
            }
        }
        private TrackableCollection<FixedAsset> _fixedAssets;
    
        [DataMember]
        public Section Section
        {
            get { return _section; }
            set
            {
                if (!ReferenceEquals(_section, value))
                {
                    var previousValue = _section;
                    _section = value;
                    FixupSection(previousValue);
                    OnNavigationPropertyChanged("Section");
                }
            }
        }
        private Section _section;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            FixedAssets.Clear();
            Section = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupSection(Section previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.People.Contains(this))
            {
                previousValue.People.Remove(this);
            }
    
            if (Section != null)
            {
                if (!Section.People.Contains(this))
                {
                    Section.People.Add(this);
                }
    
                id_section = Section.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Section")
                    && (ChangeTracker.OriginalValues["Section"] == Section))
                {
                    ChangeTracker.OriginalValues.Remove("Section");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Section", previousValue);
                }
                if (Section != null && !Section.ChangeTracker.ChangeTrackingEnabled)
                {
                    Section.StartTracking();
                }
            }
        }
    
        private void FixupFixedAssets(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FixedAsset item in e.NewItems)
                {
                    item.Person = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FixedAssets", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FixedAsset item in e.OldItems)
                {
                    if (ReferenceEquals(item.Person, this))
                    {
                        item.Person = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FixedAssets", item);
                    }
                }
            }
        }

        #endregion
    }
}
