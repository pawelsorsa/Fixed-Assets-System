//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace EF_ZMTdbEntities
{
    public partial class ZMTdbConnection : ObjectContext
    {
        public const string ConnectionString = "name=ZMTdbConnection";
        public const string ContainerName = "ZMTdbConnection";
    
        #region Constructors
    
        public ZMTdbConnection()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public ZMTdbConnection(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public ZMTdbConnection(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<Device> Devices
        {
            get { return _devices  ?? (_devices = CreateObjectSet<Device>("Devices")); }
        }
        private ObjectSet<Device> _devices;
    
        public ObjectSet<Kind> Kinds
        {
            get { return _kinds  ?? (_kinds = CreateObjectSet<Kind>("Kinds")); }
        }
        private ObjectSet<Kind> _kinds;
    
        public ObjectSet<PeripheralDevice> PeripheralDevices
        {
            get { return _peripheralDevices  ?? (_peripheralDevices = CreateObjectSet<PeripheralDevice>("PeripheralDevices")); }
        }
        private ObjectSet<PeripheralDevice> _peripheralDevices;
    
        public ObjectSet<Subgroup> Subgroups
        {
            get { return _subgroups  ?? (_subgroups = CreateObjectSet<Subgroup>("Subgroups")); }
        }
        private ObjectSet<Subgroup> _subgroups;
    
        public ObjectSet<Contractor> Contractors
        {
            get { return _contractors  ?? (_contractors = CreateObjectSet<Contractor>("Contractors")); }
        }
        private ObjectSet<Contractor> _contractors;
    
        public ObjectSet<MembershipUser> MembershipUsers
        {
            get { return _membershipUsers  ?? (_membershipUsers = CreateObjectSet<MembershipUser>("MembershipUsers")); }
        }
        private ObjectSet<MembershipUser> _membershipUsers;
    
        public ObjectSet<Licence> Licences
        {
            get { return _licences  ?? (_licences = CreateObjectSet<Licence>("Licences")); }
        }
        private ObjectSet<Licence> _licences;
    
        public ObjectSet<FixedAsset> FixedAssets
        {
            get { return _fixedAssets  ?? (_fixedAssets = CreateObjectSet<FixedAsset>("FixedAssets")); }
        }
        private ObjectSet<FixedAsset> _fixedAssets;
    
        public ObjectSet<MembershipRole> MembershipRoles
        {
            get { return _membershipRoles  ?? (_membershipRoles = CreateObjectSet<MembershipRole>("MembershipRoles")); }
        }
        private ObjectSet<MembershipRole> _membershipRoles;
    
        public ObjectSet<Person> People
        {
            get { return _people  ?? (_people = CreateObjectSet<Person>("People")); }
        }
        private ObjectSet<Person> _people;
    
        public ObjectSet<Section> Sections
        {
            get { return _sections  ?? (_sections = CreateObjectSet<Section>("Sections")); }
        }
        private ObjectSet<Section> _sections;

        #endregion
    }
}
