//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace EF_ZMTdbEntities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PeripheralDevice))]
    [KnownType(typeof(FixedAsset))]
    public partial class Device: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public int id_peripheral_device
        {
            get { return _id_peripheral_device; }
            set
            {
                if (_id_peripheral_device != value)
                {
                    ChangeTracker.RecordOriginalValue("id_peripheral_device", _id_peripheral_device);
                    if (!IsDeserializing)
                    {
                        if (PeripheralDevice != null && PeripheralDevice.id != value)
                        {
                            PeripheralDevice = null;
                        }
                    }
                    _id_peripheral_device = value;
                    OnPropertyChanged("id_peripheral_device");
                }
            }
        }
        private int _id_peripheral_device;
    
        [DataMember]
        public string serial_number
        {
            get { return _serial_number; }
            set
            {
                if (_serial_number != value)
                {
                    _serial_number = value;
                    OnPropertyChanged("serial_number");
                }
            }
        }
        private string _serial_number;
    
        [DataMember]
        public string ip_address
        {
            get { return _ip_address; }
            set
            {
                if (_ip_address != value)
                {
                    _ip_address = value;
                    OnPropertyChanged("ip_address");
                }
            }
        }
        private string _ip_address;
    
        [DataMember]
        public string mac_address
        {
            get { return _mac_address; }
            set
            {
                if (_mac_address != value)
                {
                    _mac_address = value;
                    OnPropertyChanged("mac_address");
                }
            }
        }
        private string _mac_address;
    
        [DataMember]
        public string producer
        {
            get { return _producer; }
            set
            {
                if (_producer != value)
                {
                    _producer = value;
                    OnPropertyChanged("producer");
                }
            }
        }
        private string _producer;
    
        [DataMember]
        public string model
        {
            get { return _model; }
            set
            {
                if (_model != value)
                {
                    _model = value;
                    OnPropertyChanged("model");
                }
            }
        }
        private string _model;
    
        [DataMember]
        public string comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public int id_fixed_asset
        {
            get { return _id_fixed_asset; }
            set
            {
                if (_id_fixed_asset != value)
                {
                    ChangeTracker.RecordOriginalValue("id_fixed_asset", _id_fixed_asset);
                    if (!IsDeserializing)
                    {
                        if (FixedAsset != null && FixedAsset.id != value)
                        {
                            FixedAsset = null;
                        }
                    }
                    _id_fixed_asset = value;
                    OnPropertyChanged("id_fixed_asset");
                }
            }
        }
        private int _id_fixed_asset;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public PeripheralDevice PeripheralDevice
        {
            get { return _peripheralDevice; }
            set
            {
                if (!ReferenceEquals(_peripheralDevice, value))
                {
                    var previousValue = _peripheralDevice;
                    _peripheralDevice = value;
                    FixupPeripheralDevice(previousValue);
                    OnNavigationPropertyChanged("PeripheralDevice");
                }
            }
        }
        private PeripheralDevice _peripheralDevice;
    
        [DataMember]
        public FixedAsset FixedAsset
        {
            get { return _fixedAsset; }
            set
            {
                if (!ReferenceEquals(_fixedAsset, value))
                {
                    var previousValue = _fixedAsset;
                    _fixedAsset = value;
                    FixupFixedAsset(previousValue);
                    OnNavigationPropertyChanged("FixedAsset");
                }
            }
        }
        private FixedAsset _fixedAsset;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PeripheralDevice = null;
            FixedAsset = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupPeripheralDevice(PeripheralDevice previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Devices.Contains(this))
            {
                previousValue.Devices.Remove(this);
            }
    
            if (PeripheralDevice != null)
            {
                if (!PeripheralDevice.Devices.Contains(this))
                {
                    PeripheralDevice.Devices.Add(this);
                }
    
                id_peripheral_device = PeripheralDevice.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PeripheralDevice")
                    && (ChangeTracker.OriginalValues["PeripheralDevice"] == PeripheralDevice))
                {
                    ChangeTracker.OriginalValues.Remove("PeripheralDevice");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PeripheralDevice", previousValue);
                }
                if (PeripheralDevice != null && !PeripheralDevice.ChangeTracker.ChangeTrackingEnabled)
                {
                    PeripheralDevice.StartTracking();
                }
            }
        }
    
        private void FixupFixedAsset(FixedAsset previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Devices.Contains(this))
            {
                previousValue.Devices.Remove(this);
            }
    
            if (FixedAsset != null)
            {
                if (!FixedAsset.Devices.Contains(this))
                {
                    FixedAsset.Devices.Add(this);
                }
    
                id_fixed_asset = FixedAsset.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FixedAsset")
                    && (ChangeTracker.OriginalValues["FixedAsset"] == FixedAsset))
                {
                    ChangeTracker.OriginalValues.Remove("FixedAsset");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FixedAsset", previousValue);
                }
                if (FixedAsset != null && !FixedAsset.ChangeTracker.ChangeTrackingEnabled)
                {
                    FixedAsset.StartTracking();
                }
            }
        }

        #endregion
    }
}
