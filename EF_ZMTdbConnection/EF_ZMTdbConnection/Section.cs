//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace EF_ZMTdbEntities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Person))]
    public partial class Section: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string short_name
        {
            get { return _short_name; }
            set
            {
                if (_short_name != value)
                {
                    _short_name = value;
                    OnPropertyChanged("short_name");
                }
            }
        }
        private string _short_name;
    
        [DataMember]
        public string street
        {
            get { return _street; }
            set
            {
                if (_street != value)
                {
                    _street = value;
                    OnPropertyChanged("street");
                }
            }
        }
        private string _street;
    
        [DataMember]
        public string postal_code
        {
            get { return _postal_code; }
            set
            {
                if (_postal_code != value)
                {
                    _postal_code = value;
                    OnPropertyChanged("postal_code");
                }
            }
        }
        private string _postal_code;
    
        [DataMember]
        public string post
        {
            get { return _post; }
            set
            {
                if (_post != value)
                {
                    _post = value;
                    OnPropertyChanged("post");
                }
            }
        }
        private string _post;
    
        [DataMember]
        public string locality
        {
            get { return _locality; }
            set
            {
                if (_locality != value)
                {
                    _locality = value;
                    OnPropertyChanged("locality");
                }
            }
        }
        private string _locality;
    
        [DataMember]
        public string phone_number
        {
            get { return _phone_number; }
            set
            {
                if (_phone_number != value)
                {
                    _phone_number = value;
                    OnPropertyChanged("phone_number");
                }
            }
        }
        private string _phone_number;
    
        [DataMember]
        public string email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("email");
                }
            }
        }
        private string _email;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Person> People
        {
            get
            {
                if (_people == null)
                {
                    _people = new TrackableCollection<Person>();
                    _people.CollectionChanged += FixupPeople;
                }
                return _people;
            }
            set
            {
                if (!ReferenceEquals(_people, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_people != null)
                    {
                        _people.CollectionChanged -= FixupPeople;
                    }
                    _people = value;
                    if (_people != null)
                    {
                        _people.CollectionChanged += FixupPeople;
                    }
                    OnNavigationPropertyChanged("People");
                }
            }
        }
        private TrackableCollection<Person> _people;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            People.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupPeople(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Person item in e.NewItems)
                {
                    item.Section = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("People", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Person item in e.OldItems)
                {
                    if (ReferenceEquals(item.Section, this))
                    {
                        item.Section = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("People", item);
                    }
                }
            }
        }

        #endregion
    }
}
