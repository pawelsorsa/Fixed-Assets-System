//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace EF_ZMTdbEntities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Kind))]
    [KnownType(typeof(MembershipUser))]
    [KnownType(typeof(FixedAsset))]
    public partial class Licence: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id_number
        {
            get { return _id_number; }
            set
            {
                if (_id_number != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id_number' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id_number = value;
                    OnPropertyChanged("id_number");
                }
            }
        }
        private int _id_number;
    
        [DataMember]
        public string inventory_number
        {
            get { return _inventory_number; }
            set
            {
                if (_inventory_number != value)
                {
                    _inventory_number = value;
                    OnPropertyChanged("inventory_number");
                }
            }
        }
        private string _inventory_number;
    
        [DataMember]
        public int assign_fixed_asset
        {
            get { return _assign_fixed_asset; }
            set
            {
                if (_assign_fixed_asset != value)
                {
                    ChangeTracker.RecordOriginalValue("assign_fixed_asset", _assign_fixed_asset);
                    if (!IsDeserializing)
                    {
                        if (FixedAsset != null && FixedAsset.id != value)
                        {
                            FixedAsset = null;
                        }
                    }
                    _assign_fixed_asset = value;
                    OnPropertyChanged("assign_fixed_asset");
                }
            }
        }
        private int _assign_fixed_asset;
    
        [DataMember]
        public string licence_number
        {
            get { return _licence_number; }
            set
            {
                if (_licence_number != value)
                {
                    _licence_number = value;
                    OnPropertyChanged("licence_number");
                }
            }
        }
        private string _licence_number;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public int id_kind
        {
            get { return _id_kind; }
            set
            {
                if (_id_kind != value)
                {
                    ChangeTracker.RecordOriginalValue("id_kind", _id_kind);
                    if (!IsDeserializing)
                    {
                        if (Kind != null && Kind.id != value)
                        {
                            Kind = null;
                        }
                    }
                    _id_kind = value;
                    OnPropertyChanged("id_kind");
                }
            }
        }
        private int _id_kind;
    
        [DataMember]
        public string created_by
        {
            get { return _created_by; }
            set
            {
                if (_created_by != value)
                {
                    ChangeTracker.RecordOriginalValue("created_by", _created_by);
                    if (!IsDeserializing)
                    {
                        if (MembershipUser != null && MembershipUser.login != value)
                        {
                            MembershipUser = null;
                        }
                    }
                    _created_by = value;
                    OnPropertyChanged("created_by");
                }
            }
        }
        private string _created_by;
    
        [DataMember]
        public System.DateTime last_modified_date
        {
            get { return _last_modified_date; }
            set
            {
                if (_last_modified_date != value)
                {
                    _last_modified_date = value;
                    OnPropertyChanged("last_modified_date");
                }
            }
        }
        private System.DateTime _last_modified_date;
    
        [DataMember]
        public string last_modified_login
        {
            get { return _last_modified_login; }
            set
            {
                if (_last_modified_login != value)
                {
                    _last_modified_login = value;
                    OnPropertyChanged("last_modified_login");
                }
            }
        }
        private string _last_modified_login;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Kind Kind
        {
            get { return _kind; }
            set
            {
                if (!ReferenceEquals(_kind, value))
                {
                    var previousValue = _kind;
                    _kind = value;
                    FixupKind(previousValue);
                    OnNavigationPropertyChanged("Kind");
                }
            }
        }
        private Kind _kind;
    
        [DataMember]
        public MembershipUser MembershipUser
        {
            get { return _membershipUser; }
            set
            {
                if (!ReferenceEquals(_membershipUser, value))
                {
                    var previousValue = _membershipUser;
                    _membershipUser = value;
                    FixupMembershipUser(previousValue);
                    OnNavigationPropertyChanged("MembershipUser");
                }
            }
        }
        private MembershipUser _membershipUser;
    
        [DataMember]
        public FixedAsset FixedAsset
        {
            get { return _fixedAsset; }
            set
            {
                if (!ReferenceEquals(_fixedAsset, value))
                {
                    var previousValue = _fixedAsset;
                    _fixedAsset = value;
                    FixupFixedAsset(previousValue);
                    OnNavigationPropertyChanged("FixedAsset");
                }
            }
        }
        private FixedAsset _fixedAsset;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Kind = null;
            MembershipUser = null;
            FixedAsset = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupKind(Kind previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Licences.Contains(this))
            {
                previousValue.Licences.Remove(this);
            }
    
            if (Kind != null)
            {
                if (!Kind.Licences.Contains(this))
                {
                    Kind.Licences.Add(this);
                }
    
                id_kind = Kind.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Kind")
                    && (ChangeTracker.OriginalValues["Kind"] == Kind))
                {
                    ChangeTracker.OriginalValues.Remove("Kind");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Kind", previousValue);
                }
                if (Kind != null && !Kind.ChangeTracker.ChangeTrackingEnabled)
                {
                    Kind.StartTracking();
                }
            }
        }
    
        private void FixupMembershipUser(MembershipUser previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Licences.Contains(this))
            {
                previousValue.Licences.Remove(this);
            }
    
            if (MembershipUser != null)
            {
                if (!MembershipUser.Licences.Contains(this))
                {
                    MembershipUser.Licences.Add(this);
                }
    
                created_by = MembershipUser.login;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MembershipUser")
                    && (ChangeTracker.OriginalValues["MembershipUser"] == MembershipUser))
                {
                    ChangeTracker.OriginalValues.Remove("MembershipUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MembershipUser", previousValue);
                }
                if (MembershipUser != null && !MembershipUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    MembershipUser.StartTracking();
                }
            }
        }
    
        private void FixupFixedAsset(FixedAsset previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Licences.Contains(this))
            {
                previousValue.Licences.Remove(this);
            }
    
            if (FixedAsset != null)
            {
                if (!FixedAsset.Licences.Contains(this))
                {
                    FixedAsset.Licences.Add(this);
                }
    
                assign_fixed_asset = FixedAsset.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("FixedAsset")
                    && (ChangeTracker.OriginalValues["FixedAsset"] == FixedAsset))
                {
                    ChangeTracker.OriginalValues.Remove("FixedAsset");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("FixedAsset", previousValue);
                }
                if (FixedAsset != null && !FixedAsset.ChangeTracker.ChangeTrackingEnabled)
                {
                    FixedAsset.StartTracking();
                }
            }
        }

        #endregion
    }
}
